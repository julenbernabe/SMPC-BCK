#Numeor de variables: m
#Numero de elementos en cada variable: n
#Matriz con todas las variables y todos los elementos, cada fila es una variable(al contrario de lo normal): datos


n=10
X=sfix.Array(n)
X[0]=sfix(4)
X[1]=sfix(4.5)
X[2]=sfix(4)
X[3]=sfix(7.5)
X[4]=sfix(7)
X[5]=sfix(6)
X[6]=sfix(5)
X[7]=sfix(5.5)
X[8]=sfix(5)
X[9]=sfix(6)

Z=sfix.Array(n)
Z[0]=sfix(5)
Z[1]=sfix(5.5)
Z[2]=sfix(4.8)
Z[3]=sfix(5.4)
Z[4]=sfix(4.7)
Z[5]=sfix(5.6)
Z[6]=sfix(5.3)
Z[7]=sfix(5.5)
Z[8]=sfix(5.2)
Z[9]=sfix(4.8)

Y=sfix.Array(n)
for i in range(n):
  Y[i] = X[i]+sfix(4)

#Numero de variables:
m=3

#Primero juntamos todos las variables en una matriz:
#Pensar una forma para no hacer esto manualmente
datos=sfix.Matrix(m,n)
for i in range(n):
    datos[0][i]=X[i]
for i in range(n):
    datos[1][i]=Y[i]
for i in range(n):
    datos[2][i]=Z[i]



#Definimos la funcion de la media:
def media(a):
    n=len(a)
    sum=sfix(0)
    for i in range(n):
        sum = sum + a[i]
    media=sum/sfix(n)
    return media


#Funcion para calular la matriz de distancias:
def matriz_distancias(datos):
    medias=sfix.Array(m)
    for i in range(m):
        suma=sfix(0)
        for j in range(n):
            suma=suma+X_Y_Z[i][j]
        media=suma/sfix(n)
        medias[i]=media
        print_ln('\nMedias: %s',medias[i].reveal())

    desviaciones=sfix.Array(m)
    for i in range(m):
        suma=sfix(0)
        for j in range(n):
            suma=suma+(X_Y_Z[i][j]-medias[i])**2
        suma=mpc_math.sqrt(suma/sfix(n-1))
        desviaciones[i]=suma
        print_ln('\nDesviaciones: %s',desviaciones[i].reveal())
    
    covarianzas=sfix.Matrix(m,m)
    for i in range(m):
        for j in range(m):
            suma=0
            for k in range(n):
                suma=suma+(X_Y_Z[i][k]-medias[i])*(X_Y_Z[j][k]-medias[j])
            suma=suma/sfix(n-1)
            covarianzas[i][j]=suma
            print_ln('\nCovarianzas: %s',covarianzas[i][j].reveal())

    correlaciones=sfix.Matrix(m,m)
    for i in range(m):
        for j in range(i,m):
            if i==j:
                correlaciones[i][j]=sfix(1)
            else:
                r=covarianzas[i][j]/(desviaciones[i]*desviaciones[j])
	        correlaciones[i][j]=r
	        correlaciones[j][i]=r
            print_ln('\nCoeficiente de correlacion: %s',correlaciones[i][j].reveal())

    matriz_distancias=sfix.Matrix(m,m)
    for i in range(m):
        for j in range(i,m):
	    if i==j:
	        matriz_distancias[i][j]=1-correlaciones[i][j]
	    else:
	        matriz_distancias[i][j]=1-correlaciones[i][j]
	    print_ln('\nMatriz distancias: %s', matriz_distancias[i][j].reveal())
    
    return matriz_distancias


#Funcion para hacer el clustering:
def clustering(datos):
    m=len(datos)
    #Se empieza con cada uno de los datos como cluster propio:
    clusters=datos
    k=sfix.Array(1)
    k[0]=1
    #k representa el numero de elementos en cada uno de los clusters
    clusters_indices=sfix.Array(m,k)
    for i in range(m):
        clusters_indices[i]=sfix.Array(1)
        clusters_indices[i][0]=[i]
    #En el caso de tener x,y,z al principio tendríamos:
    #clusters_indices=[[0],[1],[2]]
    #
    distancias=matriz_distancias(datos)
    max=sfix.Array(1) 
    max[0]=sfix(0)
    for i in range(len(clusters)):
        for j in range(len(clusters)):
            if distancias[i][j]>max[0]:
                max[0]=distancias[i][j]
                juntar1=i
                juntar2=j
            elif -distancias[i][j]>max[0]:
                max[0]=-distancias[i][j]
                juntar1=i
                juntar2=j
    #DEFINIMOS UN CORTE DE LO QUE CONSIDERAMOS ESTAR RELACIONADOS,EN ESTE CASO 0.6
    while max>0.6:
        #cuantos clusters había hasta ahora
        p=len(distancias)
        #ahora habra un cluster menos
        k=k+1 
        #El numero de elementos que puede haber en cada cluster
        cluster_nuev=sfix.Array(p-1,k)
        for i in range(p-1):
            if i ==juntar1:
                cluster_nuev[i][k-2]=juntar1
                cluster_nuev[i][k-1]=juntar2
            elif i>=juntar2:
            else:
                cluster_nuev[i][k-2]=clusters_indices[i][0]
                cluster_nuev[i][k-1]=clusters_indices[i][0]
                #cuando solo hay uno repetimos ese elemento k veces
                for r in range(k):
                    #Cuando solo hay uno repetimos ese elemento k veces
                    cluster_nuev[i][r]=clusters_indices[i]

        distancias_nuev=sfix.Array(p-1,p-1)
        for i in range(p-1):
            for j in range(i,p-1):
                if i==juntar1:


                elif i==juntar2:

                else:
                    if j==juntar1:
                        media_juntar=media(distancias[i][juntar1],distancias[i][juntar2])
                        distancias_nuev[i][j]=media_juntar
                        distancias_nuev[j][i]=media_juntar
                    elif j>=juntar2:
                        distancias_nuev[i][j]=distancias_nuev[i][j+1]

                    else:
                        distancias_nuev[i][j]=distancias[i][j]



                #SEGUIR
#para guardarlo algo parecido a distancias_nuev pero con los clusters

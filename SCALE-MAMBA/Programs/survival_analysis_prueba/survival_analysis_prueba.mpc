import math
n=17482

#Las n primeras corresponden al tiempo
tiempo = sfix.Array(n)
#Las n ultimas corresponden al goteo
goteo = sfix.Array(n)

@for_range(n)
def setTiempo(i):
  tiempo[i] = sfix.load_sint(sint.get_private_input_from(0))

@for_range(n,2*n)
def setGoteo(i):
  goteo[i-n] = sfix.load_sint(sint.get_private_input_from(0))

fallas=sfix.Array(1)
@for_range(n)
def range_body(i):
  @if_e((goteo[i]==0).reveal()==1)
  def block():
      fallas[0]=fallas[0]
  @else_
  def block():
      fallas[0]=fallas[0]+1


print_ln('Numero de fallas es: %s', fallas[0].reveal())


TT=tiempo[n-1]-tiempo[0]
print_ln('\n Tiempo final es: %s',tiempo[n-1].reveal())
print_ln('\n Tiempo inicial es %s',tiempo[0].reveal())
print_ln('\n Tiempo total es %s segundos \n',TT.reveal())


NOT=sfix.Array(1)
fallas=sfix.Array(1)
tiempo_start=sfix.Array(1)

@for_range(n)
def range_body(i):
  #si goteo no es 0
  #empieza el goteo 
  @if_e((goteo[i]==0).reveal()==0)
  def block():
      @if_e((tiempo_start[0]==0).reveal()==1)
      def block():
          fallas[0]=fallas[0]+1
          tiempo_start[0]=tiempo[i]
      @else_
      def block():
          fallas[0]=fallas[0]
          tiempo_start[0]=tiempo_start[0]

  #Si goteo es cero
  @else_
  def block():
      fallas[0]=fallas[0]


print_ln('Numero de fallas es: %s',fallas[0].reveal())

NOT[0]=tiempo[n-1]-tiempo_start[0]
print_ln('Tiempo no operacional es: %s', NOT[0].reveal())

MTBF= (TT-NOT[0])/fallas[0]
print_ln('Media es: %s', MTBF.reveal())


landa= sfix(1)/ MTBF
print_ln('lambda es: %s',landa.reveal())

mediana=sfix(math.log(2,10))/landa
print_ln('mediana es: %s', mediana.reveal())

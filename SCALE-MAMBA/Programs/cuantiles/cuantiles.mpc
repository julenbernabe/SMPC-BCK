#Los cuantiles son puntos tomados a intervalos regulares
# de la funcion de distribucion de una variable aleatoria. 

#El cuantil 0.36 deja un 36% de los valores por debajo 
#El cuantil 0.5 --> mediana

#CUARTILES: Dividen la distribucion en cuatro partes
#   0.25 --> Q1
#   0.5 mediana --> Q2
#   0.75 --> Q3
#   rango intercuartilico: diferencia entre el tercer cuartil y el primero

#QUINTILES: Dividen la districucion en cinco partes
#DECILES: Dividen la distribucion en diez partes
#PERCENTILES: Dividen la distribucion en 100 partes
#   P25=Q_1
#   P50=Q_2
#   P75=Q_3


#Variables continuas --> las partes son exactamente iguales
#Variables discretas --> aproximadamente iguales

#..................CUARTILES...................
#https://www.universoformulas.com/estadistica/descriptiva/cuartiles/

#Dados n datos ordenados:

#Primer cuartil:
n=125
datos=sfix.Array(n)
@for_range(n)
def setDatos(i):
  datos[i] = sfix.load_sint(sint.get_private_input_from(0))

#Para saber si un numero es decimal o no:
#   El numero sera entero si al dividirlo entre 1 el resto es cero
def es_entero(numero):
    if numero%1==0:
        return True
    else:
        return False


#PARA DATOS NO AGRUPADOS

def Q_1(a):
    datos_ordenados=sort(a)
    n=len(datos_ordenados)
    #Esto nos da la posicion del primer cuartil 
    pos=(n+1)/4
    print_ln('Posicion primer cuartil: %s',pos)
    if es_entero:
        Q_1=datos_ordenados[pos]
    else:
        #Si es un numero decimal
        entera= (n+1)//4
        decimal=pos-entera
        Q_1=datos_ordenados[entera]+decimal*(datos_ordenados[entera+1]-datos_ordenados[entera])
    return Q_1

def Q_3(a):
    datos_ordenados=sort(a)
    n=len(datos_ordenados)
    #Esto nos da la posicion del tercer cuartil 
    pos=3*(n+1)/4
    print_ln('Posicion tercer cuartil: %s',pos)
    if es_entero:
        Q_3=datos_ordenados[pos]
    else:
        #Si es un numero decimal
        entera= 3*(n+1)//4
        decimal=pos-entera
        Q_3=datos_ordenados[entera]+decimal*(datos_ordenados[entera+1]-datos_ordenados[entera])
    return Q_3

def mediana(a):
    datos_ordenados=sort(a)
    n=len(datos_ordenados)
    medio=(n-1)//2
    if n%2==0:
	    mediana=(datos_ordenados[medio] + datos_ordenados[medio+1]) / sfloat(2)

    else:
	    mediana=datos_ordenados[medio]
    return mediana

mediana_datos=mediana(datos)
print_ln('\n\nSOLUCION:\nLa mediana de los datos es: %s\n\n', mediana_datos.reveal())
quart_1=Q_1(datos)
print_ln('\n\nSOLUCION:\nEl primer cuartil de los datos es: %s\n\n', quart_1.reveal())
quart_3=Q_3(datos)
print_ln('\n\nSOLUCION:\nEl tercer cuartil de los datos es: %s\n\n', quart_3.reveal())



